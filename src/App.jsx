// import { useState } from 'react'
// import React from 'react';
// import AppRoutes from "./routes"
// function App() {
//   return (

//     <AppRoutes/>
//   )
// }

// export default App

import { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { setAuth } from "./features/auth/authSlice";
import AppRoutes from "./routes/AppRoutes";
function App() {
  const dispatch = useDispatch(); //gi·ª≠i action l√™n Redux store
  const token = useSelector((state) => state.auth.token); //l·∫•y token t·ª´ store

  useEffect(() => {
    //truy c·∫≠p l·∫ßn ƒë·∫ßu
    const storedUser = localStorage.getItem("user"); //l·∫•y item t·ª´ localSrorage
    const storedToken = localStorage.getItem("token");

    if (storedUser && storedToken) {
      //n·∫øu c√≥
      dispatch(
        setAuth({ // g·ªçi setAuth ƒë·ªÉ c·∫≠p nh·∫≠t l·∫°i redux store 
          user: JSON.parse(storedUser),
          token: storedToken,
        })
      );
    }
    // console.log("storedUser - app.jsx: ", storedUser);
    // console.log("storedToken - app.jsx: ", storedToken); // üëà th√™m d√≤ng n√†y ƒë·ªÉ ki·ªÉm tra
  }, []);

  useEffect(() => { //ch·∫°y khi token thay ƒë·ªïi
    // n·∫øu kh√¥ng c√≥ token
    if (!token) { // n·∫øu token ·ªü store = null
      //l·∫•y token ·ªü storage g√°n v√†o redux store l·∫°i
      const storedUser = localStorage.getItem("user");
      const storedToken = localStorage.getItem("token");
      
      if (storedUser && storedToken) {
        dispatch(
          setAuth({
            user: JSON.parse(storedUser),
            token: storedToken,
          })
        );
      } else {
        // n·∫øu token trong storage c≈©ng = null
        // th√¨ set store b·∫±ng null ƒë·ªÉ ƒëƒÉng xu·∫•t
        // ƒë·ªÉ ƒë·∫£m b·∫£o isInitialized ƒë∆∞·ª£c set trong m·ªçi tr∆∞·ªùng h·ª£p
        dispatch(setAuth({ user: null, token: null }));
      }
    }
  }, [dispatch, token]);

  return (
    <div>
      <AppRoutes />
    </div>
  );
}

export default App;
